{"version":3,"sources":["components/Input.js","components/List0.js","components/TodoList.js","index.js"],"names":["Input","className","htmlFor","id","value","this","props","inpValue","type","onChange","handleChange","onClick","addTodo","Component","List0","renderTodos","done","todos","map","todo","idx","checked","toggle","dangerouslySetInnerHTML","__html","title","delTodo","arr1","filter","item","length","style","color","TodoList","e","setState","target","state","index","newTodos","JSON","parse","stringify","localStorage","setItem","getItem","ReactDOM","render","document","getElementById"],"mappings":"6KAEqBA,E,uKAEb,OACI,yBAAKC,UAAU,OACX,2BAAOC,QAAQ,OAAf,YACA,2BACAC,GAAG,MACHC,MAAOC,KAAKC,MAAMC,SAAUC,KAAK,OACjCC,SAAUJ,KAAKC,MAAMI,eACrB,4BAAQC,QAASN,KAAKC,MAAMM,SAA5B,qB,GATmBC,aCAdC,E,4MAEjBC,YAAY,SAACC,GACT,OAAO,EAAKV,MAAMW,MAAMC,KAAI,SAACC,EAAKC,GAC9B,GAAGJ,GAAMG,EAAKH,KACV,OAAO,4BACH,2BAAOR,KAAK,WAAWa,QAASL,EAAML,QAAS,kBAAK,EAAKL,MAAMgB,OAAOF,MACtE,0BAAMG,wBAAyB,CAACC,OAAOL,EAAKM,SAC5C,4BAAQd,QAAS,kBAAI,EAAKL,MAAMoB,QAAQN,KAAxC,qB,uDAQZ,IAAIO,EAAKtB,KAAKC,MAAMW,MAAMW,QAAO,SAAAC,GAAI,OAAGA,EAAKb,QAC7C,OACI,yBAAKf,UAAU,OACX,uDAAS0B,EAAKG,QACd,4BAEQzB,KAAKU,aAAY,IAGzB,wDACA,wBAAIgB,MAAO,CAACC,MAAM,QAEV3B,KAAKU,aAAY,S,GA5BNF,aCGdoB,E,kDACjB,aAAc,IAAD,8BACT,gBAWJvB,aAAa,SAACwB,GACV,EAAKC,SAAS,CAAC5B,SAAS2B,EAAEE,OAAOhC,SAbxB,EAebQ,QAAQ,WACD,EAAKyB,MAAM9B,UACV,EAAK4B,SAAS,CACVlB,MAAM,CACF,CACIQ,MAAM,EAAKY,MAAM9B,SAASS,MAAK,IAFlC,mBAIE,EAAKqB,MAAMpB,UAI1B,EAAKoB,MAAM9B,SAAS,IA1BX,EAyCbmB,QAAQ,SAACN,GACL,EAAKe,SAAS,CACVlB,MAAM,EAAKoB,MAAMpB,MAAMW,QAAO,SAACC,EAAKS,GAAN,OAC1BA,GAAOlB,QA5CN,EAiDbE,OAAO,SAACgB,GACJ,IAAIC,EAASC,KAAKC,MAAMD,KAAKE,UAAU,EAAKL,MAAMpB,QAClDsB,EAASD,GAAOtB,MAAMuB,EAASD,GAAOtB,KACtC,EAAKmB,SACD,CAAClB,MAAMsB,KAnDX,EAAKF,MAAM,CACP9B,SAAS,GACTU,MAAM,CACF,CAACQ,MAAM,IAAIT,MAAK,GAChB,CAACS,MAAM,IAAIT,MAAK,GAChB,CAACS,MAAM,IAAIT,MAAK,GAChB,CAACS,MAAM,IAAIT,MAAK,KARf,E,iEA6BT2B,aAAaC,QACT,QACAJ,KAAKE,UAAUrC,KAAKgC,MAAMpB,U,0CAI9B,IAAIA,EAAM0B,aAAaE,QAAQ,SAC5B5B,GACCZ,KAAK8B,SAAS,CAAClB,MAAMuB,KAAKC,MAAMxB,O,+BAoBpC,OACI,6BACI,kBAAC,EAAD,CAAOV,SAAUF,KAAKgC,MAAM9B,SAAUU,MAAOZ,KAAKgC,MAAMpB,MAAOL,QAASP,KAAKO,QAASF,aAAcL,KAAKK,eACzG,kBAAC,EAAD,CAAOH,SAAUF,KAAKgC,MAAM9B,SAAUU,MAAOZ,KAAKgC,MAAMpB,MAAOS,QAASrB,KAAKqB,QAASJ,OAAQjB,KAAKiB,c,GA7D7ET,aCStCiC,IAASC,OACH,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.a5d72ceb.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class Input extends Component {    \r\n    render() {\r\n        return (\r\n            <div className='box'>\r\n                <label htmlFor=\"inp\">todolist</label>\r\n                <input\r\n                id=\"inp\" \r\n                value={this.props.inpValue} type='text' \r\n                onChange={this.props.handleChange}></input>\r\n                <button onClick={this.props.addTodo}>添加</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class List0 extends Component {\r\n    //正在进行的列表\r\n    renderTodos=(done)=>{\r\n        return this.props.todos.map((todo,idx)=>{\r\n            if(done==todo.done){\r\n                return <li>\r\n                    <input type=\"checkbox\" checked={done} onClick={()=>+this.props.toggle(idx)}></input>\r\n                    <span dangerouslySetInnerHTML={{__html:todo.title}}></span>\r\n                    <button onClick={()=>this.props.delTodo(idx)}>删除</button>\r\n                </li>\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        let arr1=this.props.todos.filter(item=>!item.done);\r\n        return (\r\n            <div className='box'>\r\n                <h1>正在进行{arr1.length}</h1>\r\n                <ul>\r\n                    {\r\n                        this.renderTodos(false)\r\n                    }\r\n                </ul>\r\n                <h1>已经完成</h1>\r\n                <ul style={{color:'red'}}>\r\n                {\r\n                        this.renderTodos(true)\r\n                    }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Input from './Input';\r\nimport List0 from './List0';\r\n\r\n\r\nexport default class TodoList extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            inpValue:'',\r\n            todos:[\r\n                {title:'1',done:false},\r\n                {title:'2',done:true},\r\n                {title:'3',done:true},\r\n                {title:'4',done:false}\r\n            ]\r\n        }\r\n    }\r\n    handleChange=(e)=>{\r\n        this.setState({inpValue:e.target.value});\r\n    } \r\n    addTodo=()=>{\r\n        if(this.state.inpValue){\r\n            this.setState({\r\n                todos:[\r\n                    {\r\n                        title:this.state.inpValue,done:false\r\n                     },\r\n                    ...this.state.todos\r\n                ]\r\n            })\r\n        }\r\n        this.state.inpValue=\"\"\r\n    }\r\n    componentDidUpdate(){\r\n        localStorage.setItem(\r\n            'todos',\r\n            JSON.stringify(this.state.todos)\r\n        )\r\n    }//进行判断，不进行存储\r\n    componentDidMount(){\r\n        let todos=localStorage.getItem('todos');\r\n        if(todos){\r\n            this.setState({todos:JSON.parse(todos)})\r\n        }\r\n    }\r\n    //删除操作\r\n    delTodo=(idx)=>{\r\n        this.setState({\r\n            todos:this.state.todos.filter((item,index)=>\r\n                index!=idx\r\n            )\r\n        })\r\n    }\r\n    //正在进行和已经完成的转换\r\n    toggle=(index)=>{\r\n        let newTodos=JSON.parse(JSON.stringify(this.state.todos));\r\n        newTodos[index].done=!newTodos[index].done;\r\n        this.setState(\r\n            {todos:newTodos}\r\n        );\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Input inpValue={this.state.inpValue} todos={this.state.todos} addTodo={this.addTodo} handleChange={this.handleChange} />\r\n                <List0 inpValue={this.state.inpValue} todos={this.state.todos} delTodo={this.delTodo} toggle={this.toggle}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import Control from './components/Control';\n// import Buttons from './components/Buttons';\n// import Home from './pages/Home';\n// import Demo01 from './pages/Demo01';\n// import App from './pages/App';\n// import Hoc from './pages/Hoc';\n// import {Detail} from './pages/Hoc';//命名导出\n// import Hook from './pages/Hook';\n// import Context from './pages/Context'\nimport TodoList from './components/TodoList';\n\n\nReactDOM.render(\n      <TodoList/>,\n      document.getElementById('root')\n    );\n\n// import $ from 'jquery';\n// console.log($);\n\n\n// ReactDOM.render(\n//   <Context.Provider value='123'><Hook/></Context.Provider>,\n//   document.getElementById('root')\n// );\n\n// ReactDOM.render(\n// <div><Hoc/>\n//   <Detail name='tom'/></div>,\n//   document.getElementById('root')\n// );\n\n// ReactDOM.render(\n//       <App/>,\n//       document.getElementById('root')\n//     );\n\n\n// ReactDOM.render(\n//       <Demo01/>,\n//       document.getElementById('root')\n//     );\n\n//rafce声明函数组件，直接导出\n//rcc直接创建类组件，并在index中引用\n// ReactDOM.render(\n//     <Control/>,\n//     document.getElementById('root')\n//   );\n\n//在页面中显示列表1,2,3,4,5\n// const List=()=>{\n//   const list=[1,2,3,4,5];\n//   return <div>\n//     {\n//       list.map((item)=><li key={item} >{item}</li>)\n//     }\n//   </div>\n// };\n// ReactDOM.render(\n//     <List/>,\n//     document.getElementById('root')\n// );\n\n\n//Alt+上下键 移动一行\n//按住Alt，鼠标点击\n//Ctrl+Alt+左右，选中整个单词\n//Ctrl+shift+L\n//Ctrl+左右，移动一个单词\n\n\n//跳转页面\n// const List=(props)=>{\n//   return <ul>\n//     { \n//       props.data.map((item)=><li key={item.id}>{item.title}</li>)\n//     }\n//   </ul>\n// };\n\n\n// class Home extends React.Component{\n//   constructor(){\n//     super();\n//     this.state={\n//       data:[]\n//     }\n//   }\n//   componentDidMount(){\n//     fetch('https://cnodejs.org/api/v1/topics').then(res=>res.json()).then(({data})=>{\n//       this.setState({data});\n      \n//   })\n//   }\n\n//   getData=(page)=>{\n//     fetch('https://cnodejs.org/api/v1/topics?page='+page).then(res=>res.json()).then(({data})=>{\n//       this.setState({data});\n//     })\n//   }\n//   render(){\n//     const {data}=this.state;\n//     const btns=[1,2,3,4,5];\n\n//     return <div>\n//       {\n//      btns.map((item)=><button key={item} onClick={()=>{\n//        this.getData(item)\n//      }}>{item}</button>\n//      )\n//      }\n//       <List data={data}/>\n//       </div>\n//   }\n// }\n\n// ReactDOM.render(\n//   <Home/>,\n//   document.getElementById('root')\n// );\n\n\n// const List=(props)=>{\n//   return <ul>\n//     { \n//       props.data.map((item)=><li key={item.id}>{item.title}</li>)\n//     }\n//   </ul>\n// }\n\n// const Buttons=()=>{\n//   const btns=[1,2,3,4,5];\n//   const handleClick=(item)=>{\n//     //参数，第一个事件对象，\n//     console.log(item);\n//   }\n//   return <div>\n//     {\n//       btns.map((item)=><button key={item} onClick={()=>handleClick(item)}>{item}</button>)\n//     }\n//   </div>\n// };\n\n// class Home extends React.Component{\n//   constructor(){\n//     super();\n//     this.state={\n//       data:[]\n//     }\n//     this.handleClick=this.handleClick.bind(this);\n\n//     //// setTimeout(()=>{\n//     ////   this.setState({data:[5,6,7,8,9]})\n//     //// },500)//延迟更换内容\n//   }\n//   componentDidMount(){\n//     fetch('https://cnodejs.org/api/v1/topics').then(res=>res.json()).then(({data})=>{\n//       this.setState({data});\n//       console.log(data);//data是一个对象，data.data数组\n//       console.log(data.data);\n//   })\n//   }\n//   // handleClick=()=>{\n//   //   console.log(this);\n//   // }\n \n//   render(){\n//     const {data}=this.state;\n//     return <div>\n//       {\n//         <button onClick={this.handleClick}>click</button>\n//         <Buttons/> \n//         <List data={data}/>\n//       }\n//   </div>\n//   }\n// }\n\n// ReactDOM.render(\n//   <Home/>,\n//   document.getElementById('root')\n// );\n\n\n\n\n// let ele=<h1 id=\"title\" className=\"tit\">\n//   <div>hello</div> \n//   <div>hello</div>\n//   <div>hello</div>\n//   react\n//   </h1>;\n// let ele=React.createElement('h1',{id:'title'},'hello react',React.createElement('div',{id:'div1'},1),React.createElement('div',{id:'div2'},2),React.createElement('div',{id:'div3'},3));\n// console.log(ele);\n\n\n\n// 自己写的reactdom对象，\n// let ReactDOM={\n//   render(eleObj,container){\n//     //解构\n//     const {type,props} = eleObj;\n//     //创建第一层节点\n//     let ele=document.createElement(type);\n//     //遍历属性对象，将属性添加到第一层节点对象上\n//     for(const prop in props){\n//       if(prop =='children'){\n//         //将第一层节点对象的子元素添加进去\n//         if(typeof props.children =='string'){\n//           const txtNode=document.createTextNode(props.children);\n//             ele.appendChild(txtNode);\n//             break;\n//         }//此判断是为了防止最后递归的props.children不是数组，那么foreach就不能用。\n//           props.children.forEach(child=>{\n//             if(typeof(child)=='string'){\n//               const txtNode=document.createTextNode(child);\n//               ele.appendChild(txtNode);\n//            }else{\n//              ReactDOM.render(child,ele);\n//            }    \n//           })\n//       }else{\n//           ele[prop]=props[prop];\n//       }\n//     }\n//     //将第一层DOM节点添加到\n//     container.appendChild(ele);\n//   }\n// }\n// ReactDOM.render(\n//   ele,\n//   document.getElementById('root')\n// );\n\n//渲染，每秒都要执行一次，reactdom.render()页面才能改变\n// function time(){\n//   let ele=<h1 id=\"title\" className=\"tit\">\n//   <div>当前时间</div>\n//   {new Date().toLocaleString()}\n//   </h1>;\n//   ReactDOM.render(\n//     ele,\n//     document.getElementById('root')\n//   );\n// }\n// setInterval(time,1000);\n\n\n\n//函数组件\n//UI（展示）组件，木偶组件\n//接收单一的 props 对象，返回一个 React 元素\n// function App(props){\n//   console.log(props);\n//   const {title,id,mini}=props;\n//   return <div>\n//     <h1></h1>\n//     <div>{title}</div>\n//     <div>{id}</div>\n//     <div>{mini}</div>\n//   </div>\n// }\n// ReactDOM.render(\n//   <App title='任意值' id='app'mini='abc'/>,\n//   document.getElementById('root')\n// );\n\n\n\n//智能组件\n// React 提供了 React.Component 抽象基础类\n// \t\t 直接引用 React.Component 几乎没意义，通常是继承它\n//  至少定义一个 render( ) 方法\n// class Demo extends React.Component{\n//   constructor(){\n//     super();\n//     //声明状态\n//     this.state={\n//       name:new Date().toLocaleString()\n//     }\n//     setInterval(()=>{\n//       this.setState({name:new Date().toLocaleString()})\n//     },1000)\n//   }\n//   render(){\n//     return <div>\n//       <div>name:{this.state.name}</div>\n//       <App title={this.state.name} id='app'/>\n//     </div>\n//   }\n// }\n// ReactDOM.render(\n//   <Demo/>,\n//   document.getElementById('root')\n// );\n\n\n\n\n\n"],"sourceRoot":""}